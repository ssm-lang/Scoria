module TestCases where

import Core hiding (After, Changed, Fork, GetRef, If, NewRef, Procedure, SetLocal, SetRef, Wait, While)
import qualified Data.Map as Map
import LowCore

-- regression tests. Whenever quickcheck gave a failing case I saved it. I handcopied some of them (the
-- first ones) but modified the code to output already copyable ones after like 15 of them.

testcases :: [Program]
testcases =
  [ Program "fun1" [] $
      Map.fromList
        [ ( "fun1",
            Procedure
              "fun1"
              []
              [ If
                  (BOp TBool (UOp TInt32 (Lit TInt32 (LInt32 1)) Neg) (UOp TInt32 (Lit TInt32 (LInt32 2)) Neg) OLT)
                  [Fork [("fun1", [])]]
                  [ NewRef (Fresh "v0") (Ref TBool) (BOp TBool (BOp TInt32 (Lit TInt32 (LInt32 2)) (Lit TInt32 (LInt32 1)) OPlus) (BOp TInt32 (Lit TInt32 (LInt32 1)) (Lit TInt32 (LInt32 0)) OPlus) OEQ),
                    Fork [("fun1", []), ("fun1", []), ("fun1", [])]
                  ]
              ]
          )
        ],
    Program "fun1" [Right ("ref1", Ref TBool)] $
      Map.fromList
        [("fun1", Procedure "fun1" [("ref1", Ref TBool)] [])],
    Program "fun3" [Right ("ref1", Ref TInt32)] $
      Map.fromList $
        [ ("fun3", Procedure "fun3" [("ref1", Ref TInt32)] [Fork [("fun5", [Right ("ref1", Ref TInt32)])]]),
          ("fun5", Procedure "fun5" [("ref2", Ref TInt32)] [Wait [("ref2", Ref TInt32)]])
        ],
    Program "fun1" [Right ("ref1", Ref TBool)] $
      Map.fromList
        [ ( "fun1",
            Procedure
              "fun1"
              [("ref1", Ref TBool)]
              [ NewRef (Fresh "v0") (Ref TInt32) (Lit TInt32 $ LInt32 5),
                NewRef (Fresh "v1") (Ref TInt32) (Lit TInt32 $ LInt32 6),
                NewRef (Fresh "v2") (Ref TInt32) (Lit TInt32 $ LInt32 7),
                Wait [("ref1", Ref TBool), ("v0", Ref TInt32), ("v1", Ref TInt32), ("v2", Ref TInt32)]
              ]
          )
        ],
    Program "fun1" [Right ("ref1", Ref TInt64)] $
      Map.fromList
        [ ( "fun1",
            Procedure
              "fun1"
              [("ref1", Ref TInt64)]
              [After (Lit TUInt64 (LUInt64 1)) ("ref1", Ref TInt64) (Lit TInt64 (LInt64 2))]
          ),
          ("fun2", Procedure "fun2" [] [])
        ],
    Program "fun1" [] $
      Map.fromList
        [ ( "fun1",
            Procedure
              "fun1"
              []
              [Fork [("fun1", [])]]
          )
        ],
    Program {main = "fun5", args = [Right ("ref1", Ref TInt64)], funs = Map.fromList [("fun5", Procedure {name = "fun5", arguments = [("ref1", Ref TInt64)], body = [GetRef (Fresh "v0") TInt64 ("ref1", Ref TInt64), After (BOp TUInt64 (BOp TUInt64 (BOp TUInt64 (BOp TUInt64 (Lit TUInt64 (LUInt64 30)) (Lit TUInt64 (LUInt64 181)) OTimes) (BOp TUInt64 (Lit TUInt64 (LUInt64 169)) (Lit TUInt64 (LUInt64 105)) OPlus) OTimes) (BOp TUInt64 (BOp TUInt64 (Lit TUInt64 (LUInt64 30)) (Lit TUInt64 (LUInt64 181)) OTimes) (BOp TUInt64 (Lit TUInt64 (LUInt64 169)) (Lit TUInt64 (LUInt64 105)) OPlus) OTimes) OTimes) (Lit TUInt64 (LUInt64 1)) OPlus) ("ref1", Ref TInt64) (BOp TInt64 (BOp TInt64 (Var TInt64 "v0") (Var TInt64 "v0") OMinus) (BOp TInt64 (Lit TInt64 (LInt64 (-197))) (Var TInt64 "v0") OMinus) OPlus), Wait [("ref1", Ref TInt64)], After (BOp TUInt64 (BOp TUInt64 (BOp TUInt64 (BOp TUInt64 (Lit TUInt64 (LUInt64 113)) (Lit TUInt64 (LUInt64 209)) OTimes) (BOp TUInt64 (Lit TUInt64 (LUInt64 192)) (Lit TUInt64 (LUInt64 140)) OPlus) OTimes) (BOp TUInt64 (BOp TUInt64 (Lit TUInt64 (LUInt64 113)) (Lit TUInt64 (LUInt64 209)) OTimes) (BOp TUInt64 (Lit TUInt64 (LUInt64 192)) (Lit TUInt64 (LUInt64 140)) OPlus) OTimes) OTimes) (Lit TUInt64 (LUInt64 1)) OPlus) ("ref1", Ref TInt64) (BOp TInt64 (Var TInt64 "v0") (Var TInt64 "v0") OTimes), After (BOp TUInt64 (BOp TUInt64 (BOp TUInt64 (BOp TUInt64 (Lit TUInt64 (LUInt64 162)) (Lit TUInt64 (LUInt64 100)) OTimes) (BOp TUInt64 (Lit TUInt64 (LUInt64 213)) (Lit TUInt64 (LUInt64 16)) OPlus) OTimes) (BOp TUInt64 (BOp TUInt64 (Lit TUInt64 (LUInt64 162)) (Lit TUInt64 (LUInt64 100)) OTimes) (BOp TUInt64 (Lit TUInt64 (LUInt64 213)) (Lit TUInt64 (LUInt64 16)) OPlus) OTimes) OTimes) (Lit TUInt64 (LUInt64 1)) OPlus) ("ref1", Ref TInt64) (Lit TInt64 (LInt64 (-75))), After (BOp TUInt64 (BOp TUInt64 (BOp TUInt64 (BOp TUInt64 (Lit TUInt64 (LUInt64 32)) (Lit TUInt64 (LUInt64 176)) OTimes) (BOp TUInt64 (Lit TUInt64 (LUInt64 237)) (Lit TUInt64 (LUInt64 220)) OTimes) OPlus) (BOp TUInt64 (BOp TUInt64 (Lit TUInt64 (LUInt64 32)) (Lit TUInt64 (LUInt64 176)) OTimes) (BOp TUInt64 (Lit TUInt64 (LUInt64 237)) (Lit TUInt64 (LUInt64 220)) OTimes) OPlus) OTimes) (Lit TUInt64 (LUInt64 1)) OPlus) ("ref1", Ref TInt64) (BOp TInt64 (Lit TInt64 (LInt64 (-16))) (Var TInt64 "v0") OMinus), GetRef (Fresh "v3") TInt64 ("ref1", Ref TInt64)]})]},
    Program {main = "fun2", args = [Left (BOp TUInt64 (Lit TUInt64 (LUInt64 1132)) (Lit TUInt64 (LUInt64 111109)) OPlus), Right ("ref10", Ref TInt64), Right ("ref13", Ref TBool), Left (BOp TUInt64 (Lit TUInt64 (LUInt64 85986)) (Lit TUInt64 (LUInt64 95575)) OTimes)], funs = Map.fromList [("fun2", Procedure {name = "fun2", arguments = [("var2", TUInt64), ("ref10", Ref TInt64), ("ref13", Ref TBool), ("var14", TUInt64)], body = [After (BOp TUInt64 (BOp TUInt64 (BOp TUInt64 (Var TUInt64 "var2") (Var TUInt64 "var2") OTimes) (BOp TUInt64 (Var TUInt64 "var2") (Var TUInt64 "var2") OTimes) OTimes) (Lit TUInt64 (LUInt64 1)) OPlus) ("ref10", Ref TInt64) (BOp TInt64 (Lit TInt64 (LInt64 1)) (Lit TInt64 (LInt64 1)) OMinus), GetRef (Fresh "v1") TInt64 ("ref10", Ref TInt64), GetRef (Fresh "v4") TInt64 ("ref10", Ref TInt64), Wait [("ref10", Ref TInt64)], After (BOp TUInt64 (BOp TUInt64 (BOp TUInt64 (BOp TUInt64 (Var TUInt64 "var14") (Var TUInt64 "var2") OMinus) (BOp TUInt64 (Var TUInt64 "var2") (Lit TUInt64 (LUInt64 120455)) OPlus) OPlus) (BOp TUInt64 (BOp TUInt64 (Var TUInt64 "var14") (Var TUInt64 "var2") OMinus) (BOp TUInt64 (Var TUInt64 "var2") (Lit TUInt64 (LUInt64 120455)) OPlus) OPlus) OTimes) (Lit TUInt64 (LUInt64 1)) OPlus) ("ref13", Ref TBool) (Lit TBool (LBool False))]})]},
    Program {main = "fun13", args = [Right ("ref3", Ref TBool), Left (BOp TUInt64 (Lit TUInt64 (LUInt64 5800)) (Lit TUInt64 (LUInt64 348)) OTimes), Left (BOp TUInt64 (Lit TUInt64 (LUInt64 3097)) (Lit TUInt64 (LUInt64 7722)) OTimes)], funs = Map.fromList [("fun13", Procedure {name = "fun13", arguments = [("ref3", Ref TBool), ("var15", TUInt64), ("var16", TUInt64)], body = [After (BOp TUInt64 (BOp TUInt64 (BOp TUInt64 (Var TUInt64 "var16") (Var TUInt64 "var16") OTimes) (BOp TUInt64 (Var TUInt64 "var15") (Lit TUInt64 (LUInt64 4784)) OMinus) OTimes) (Lit TUInt64 (LUInt64 1)) OPlus) ("ref3", Ref TBool) (BOp TBool (Lit TInt32 (LInt32 10)) (Lit TInt32 (LInt32 1)) OEQ), NewRef (Fresh "v0") (Ref TInt32) (UOp TInt32 (Lit TInt32 (LInt32 1)) Neg), Wait [("ref3", Ref TBool)], After (BOp TUInt64 (BOp TUInt64 (BOp TUInt64 (Var TUInt64 "var16") (Var TUInt64 "var15") OTimes) (BOp TUInt64 (Lit TUInt64 (LUInt64 278)) (Var TUInt64 "var15") OMinus) OTimes) (Lit TUInt64 (LUInt64 1)) OPlus) ("v0", Ref TInt32) (UOp TInt32 (BOp TInt32 (Lit TInt32 (LInt32 1)) (Lit TInt32 (LInt32 1)) OTimes) Neg), Wait [("ref3", Ref TBool)], Wait [("ref3", Ref TBool)]]})]},
    Program {main = "fun5", args = [Right ("ref17", Ref TInt32), Right ("ref20", Ref TUInt64), Right ("ref23", Ref TInt64), Right ("ref26", Ref TBool), Right ("ref27", Ref TBool), Left (BOp TInt32 (Lit TInt32 (LInt32 42)) (Lit TInt32 (LInt32 21)) OPlus), Right ("ref30", Ref TBool), Right ("ref31", Ref TInt32), Right ("ref33", Ref TInt32), Right ("ref38", Ref TBool), Right ("ref41", Ref TInt32), Right ("ref43", Ref TUInt64)], funs = Map.fromList [("fun4", Procedure {name = "fun4", arguments = [("ref11", Ref TBool), ("ref18", Ref TBool), ("ref20", Ref TUInt64)], body = [NewRef (Fresh "v2") (Ref TInt32) (BOp TInt32 (BOp TInt32 (Lit TInt32 (LInt32 37)) (Lit TInt32 (LInt32 1)) OMinus) (BOp TInt32 (Lit TInt32 (LInt32 1)) (Lit TInt32 (LInt32 200)) OMinus) OTimes), GetRef (Fresh "v3") TBool ("ref18", Ref TBool), Fork [("fun4", [Right ("ref11", Ref TBool), Right ("ref18", Ref TBool), Right ("ref20", Ref TUInt64)])], Wait [("ref18", Ref TBool)], If (BOp TBool (Lit TInt32 (LInt32 1)) (Lit TInt32 (LInt32 1)) OLT) [] []]}), ("fun5", Procedure {name = "fun5", arguments = [("ref17", Ref TInt32), ("ref20", Ref TUInt64), ("ref23", Ref TInt64), ("ref26", Ref TBool), ("ref27", Ref TBool), ("var28", TInt32), ("ref30", Ref TBool), ("ref31", Ref TInt32), ("ref33", Ref TInt32), ("ref38", Ref TBool), ("ref41", Ref TInt32), ("ref43", Ref TUInt64)], body = [NewRef (Fresh "v0") (Ref TInt32) (Var TInt32 "var28"), After (Lit TUInt64 (LUInt64 1228)) ("ref38", Ref TBool) (BOp TBool (BOp TInt32 (Lit TInt32 (LInt32 182)) (Lit TInt32 (LInt32 1)) OPlus) (BOp TInt32 (Lit TInt32 (LInt32 1)) (Lit TInt32 (LInt32 147)) OMinus) OLT), Changed (Fresh "v1") TBool ("ref26", Ref TBool), NewRef (Fresh "v2") (Ref TBool) (BOp TBool (BOp TInt32 (Lit TInt32 (LInt32 153)) (Lit TInt32 (LInt32 1)) OTimes) (UOp TInt32 (Lit TInt32 (LInt32 1)) Neg) OLT), Fork [("fun6", [Right ("ref31", Ref TInt32), Left (BOp TInt32 (BOp TInt32 (Lit TInt32 (LInt32 1)) (Lit TInt32 (LInt32 1)) OTimes) (BOp TInt32 (Lit TInt32 (LInt32 191)) (Lit TInt32 (LInt32 168)) OTimes) OPlus), Right ("ref41", Ref TInt32), Right ("ref33", Ref TInt32), Right ("ref31", Ref TInt32), Right ("ref30", Ref TBool), Right ("v0", Ref TInt32), Right ("ref43", Ref TUInt64), Right ("ref20", Ref TUInt64), Right ("ref17", Ref TInt32), Right ("ref20", Ref TUInt64), Right ("v0", Ref TInt32), Right ("ref38", Ref TBool), Right ("v2", Ref TBool), Right ("ref26", Ref TBool), Right ("ref23", Ref TInt64), Right ("ref27", Ref TBool), Left (BOp TInt32 (Lit TInt32 (LInt32 85)) (Lit TInt32 (LInt32 1)) OPlus)])], If (BOp TBool (BOp TBool (Lit TBool (LBool True)) (Lit TBool (LBool True)) OEQ) (BOp TBool (Lit TInt32 (LInt32 1)) (Lit TInt32 (LInt32 1)) OEQ) OEQ) [] [GetRef (Fresh "v3") TBool ("ref27", Ref TBool)], GetRef (Fresh "v5") TInt64 ("ref23", Ref TInt64), GetRef (Fresh "v6") TUInt64 ("ref20", Ref TUInt64)]}), ("fun6", Procedure {name = "fun6", arguments = [("ref6", Ref TInt32), ("var9", TInt32), ("ref11", Ref TInt32), ("ref22", Ref TInt32), ("ref24", Ref TInt32), ("ref27", Ref TBool), ("ref28", Ref TInt32), ("ref29", Ref TUInt64), ("ref31", Ref TUInt64), ("ref34", Ref TInt32), ("ref37", Ref TUInt64), ("ref38", Ref TInt32), ("ref39", Ref TBool), ("ref40", Ref TBool), ("ref42", Ref TBool), ("ref45", Ref TInt64), ("ref46", Ref TBool), ("var47", TInt32)], body = [GetRef (Fresh "v0") TInt32 ("ref28", Ref TInt32), NewRef (Fresh "v1") (Ref TBool) (BOp TBool (BOp TBool (Lit TInt32 (LInt32 1)) (Lit TInt32 (LInt32 1)) OEQ) (BOp TBool (Lit TInt32 (LInt32 1)) (Lit TInt32 (LInt32 1)) OEQ) OEQ), SetRef ("ref39", Ref TBool) (BOp TBool (BOp TInt32 (Lit TInt32 (LInt32 1)) (Lit TInt32 (LInt32 1)) OPlus) (BOp TInt32 (Lit TInt32 (LInt32 1)) (Lit TInt32 (LInt32 1)) OMinus) OEQ), Changed (Fresh "v2") TBool ("ref34", Ref TInt32), SetRef ("ref42", Ref TBool) (Lit TBool (LBool True)), After (Lit TUInt64 (LUInt64 2132)) ("ref38", Ref TInt32) (BOp TInt32 (BOp TInt32 (Lit TInt32 (LInt32 84)) (Lit TInt32 (LInt32 57)) OPlus) (BOp TInt32 (Lit TInt32 (LInt32 1)) (Var TInt32 "var9") OPlus) OMinus), Fork [("fun4", [Right ("ref40", Ref TBool), Right ("ref39", Ref TBool), Right ("ref31", Ref TUInt64)]), ("fun6", [Right ("ref24", Ref TInt32), Left (BOp TInt32 (BOp TInt32 (Var TInt32 "v0") (Lit TInt32 (LInt32 1)) OPlus) (BOp TInt32 (Lit TInt32 (LInt32 1)) (Lit TInt32 (LInt32 27)) OMinus) OTimes), Right ("ref34", Ref TInt32), Right ("ref6", Ref TInt32), Right ("ref11", Ref TInt32), Right ("ref27", Ref TBool), Right ("ref22", Ref TInt32), Right ("ref37", Ref TUInt64), Right ("ref29", Ref TUInt64), Right ("ref38", Ref TInt32), Right ("ref37", Ref TUInt64), Right ("ref11", Ref TInt32), Right ("ref40", Ref TBool), Right ("ref39", Ref TBool), Right ("ref42", Ref TBool), Right ("ref45", Ref TInt64), Right ("ref40", Ref TBool), Left (BOp TInt32 (Lit TInt32 (LInt32 1)) (Lit TInt32 (LInt32 84)) OPlus)])]]})]},
    Program {main = "fun2", args = [Right ("ref6", Ref TBool), Left (BOp TInt32 (Lit TInt32 (LInt32 179)) (Lit TInt32 (LInt32 130)) OTimes)], funs = Map.fromList [("fun2", Procedure {name = "fun2", arguments = [("ref6", Ref TBool), ("var7", TInt32)], body = [GetRef (Fresh "v11") TBool ("ref6", Ref TBool), Changed (Fresh "v12") TBool ("ref6", Ref TBool), SetLocal (Fresh "var7") TInt32 (BOp TInt32 (BOp TInt32 (Lit TInt32 (LInt32 1)) (Var TInt32 "var7") OMinus) (BOp TInt32 (Lit TInt32 (LInt32 52)) (Var TInt32 "var7") OPlus) OTimes), GetRef (Fresh "v15") TBool ("ref6", Ref TBool), After (Lit TUInt64 (LUInt64 1292)) ("ref6", Ref TBool) (BOp TBool (BOp TInt32 (Lit TInt32 (LInt32 212)) (Var TInt32 "var7") OTimes) (BOp TInt32 (Lit TInt32 (LInt32 112)) (Lit TInt32 (LInt32 20)) OMinus) OLT), Wait [("ref6", Ref TBool)], Wait [("ref6", Ref TBool)], Wait [("ref6", Ref TBool)], Wait [("ref6", Ref TBool)], Wait [("ref6", Ref TBool)], Wait [("ref6", Ref TBool)], Wait [("ref6", Ref TBool)], Wait [("ref6", Ref TBool)]]})]},
    Program {main = "fun2", args = [Left (BOp TInt32 (Lit TInt32 (LInt32 132)) (Lit TInt32 (LInt32 111)) OMinus)], funs = Map.fromList [("fun2",Procedure {name = "fun2", arguments = [("var1",TInt32)], body = [If (BOp TBool (BOp TInt32 (Var TInt32 "var1") (Lit TInt32 (LInt32 166)) OTimes) (BOp TInt32 (Var TInt32 "var1") (Var TInt32 "var1") OMinus) OLT) [If (BOp TBool (BOp TInt32 (Var TInt32 "var1") (Lit TInt32 (LInt32 149)) OMinus) (UOp TInt32 (Lit TInt32 (LInt32 197)) Neg) OEQ) [Fork [("fun2",[Left (BOp TInt32 (Var TInt32 "var1") (Lit TInt32 (LInt32 202)) OTimes)]),("fun2",[Left (BOp TInt32 (BOp TInt32 (Lit TInt32 (LInt32 106)) (Lit TInt32 (LInt32 17)) OTimes) (BOp TInt32 (Lit TInt32 (LInt32 185)) (Lit TInt32 (LInt32 144)) OTimes) OPlus)]),("fun2",[Left (BOp TInt32 (Var TInt32 "var1") (Var TInt32 "var1") OTimes)]),("fun2",[Left (BOp TInt32 (UOp TInt32 (Var TInt32 "var1") Neg) (BOp TInt32 (Var TInt32 "var1") (Var TInt32 "var1") OTimes) OMinus)]),("fun2",[Left (Var TInt32 "var1")]),("fun2",[Left (BOp TInt32 (UOp TInt32 (Var TInt32 "var1") Neg) (UOp TInt32 (Var TInt32 "var1") Neg) OMinus)]),("fun2",[Left (Lit TInt32 (LInt32 63))]),("fun2",[Left (BOp TInt32 (UOp TInt32 (Var TInt32 "var1") Neg) (BOp TInt32 (Lit TInt32 (LInt32 156)) (Var TInt32 "var1") OPlus) OTimes)])],If (BOp TBool (Var TInt32 "var1") (Lit TInt32 (LInt32 90)) OLT) [] [Fork [("fun2",[Left (Var TInt32 "var1")]),("fun2",[Left (BOp TInt32 (BOp TInt32 (Lit TInt32 (LInt32 96)) (Var TInt32 "var1") OTimes) (BOp TInt32 (Lit TInt32 (LInt32 166)) (Var TInt32 "var1") OTimes) OTimes)]),("fun2",[Left (BOp TInt32 (Lit TInt32 (LInt32 120)) (Lit TInt32 (LInt32 147)) OMinus)]),("fun2",[Left (BOp TInt32 (BOp TInt32 (Var TInt32 "var1") (Lit TInt32 (LInt32 85)) OTimes) (BOp TInt32 (Lit TInt32 (LInt32 114)) (Var TInt32 "var1") OMinus) OMinus)]),("fun2",[Left (BOp TInt32 (BOp TInt32 (Var TInt32 "var1") (Var TInt32 "var1") OMinus) (BOp TInt32 (Lit TInt32 (LInt32 54)) (Lit TInt32 (LInt32 181)) OTimes) OMinus)]),("fun2",[Left (BOp TInt32 (BOp TInt32 (Var TInt32 "var1") (Var TInt32 "var1") OMinus) (BOp TInt32 (Lit TInt32 (LInt32 74)) (Lit TInt32 (LInt32 129)) OPlus) OMinus)]),("fun2",[Left (Lit TInt32 (LInt32 11))]),("fun2",[Left (BOp TInt32 (Var TInt32 "var1") (Var TInt32 "var1") OTimes)]),("fun2",[Left (BOp TInt32 (BOp TInt32 (Lit TInt32 (LInt32 40)) (Var TInt32 "var1") OPlus) (BOp TInt32 (Var TInt32 "var1") (Var TInt32 "var1") OTimes) OMinus)]),("fun2",[Left (BOp TInt32 (BOp TInt32 (Var TInt32 "var1") (Lit TInt32 (LInt32 177)) OPlus) (BOp TInt32 (Var TInt32 "var1") (Var TInt32 "var1") OMinus) OTimes)]),("fun2",[Left (UOp TInt32 (BOp TInt32 (Var TInt32 "var1") (Var TInt32 "var1") OMinus) Neg)]),("fun2",[Left (BOp TInt32 (Lit TInt32 (LInt32 142)) (Lit TInt32 (LInt32 117)) OTimes)]),("fun2",[Left (BOp TInt32 (Var TInt32 "var1") (Var TInt32 "var1") OMinus)])]],Fork [("fun2",[Left (Lit TInt32 (LInt32 59))]),("fun2",[Left (BOp TInt32 (Lit TInt32 (LInt32 164)) (Lit TInt32 (LInt32 52)) OPlus)])]] [If (BOp TBool (Lit TInt32 (LInt32 58)) (Var TInt32 "var1") OLT) [If (Lit TBool (LBool True)) [] []] [],SetLocal (Fresh "var1") TInt32 (UOp TInt32 (BOp TInt32 (Var TInt32 "var1") (Var TInt32 "var1") OTimes) Neg),If (BOp TBool (BOp TInt32 (Lit TInt32 (LInt32 149)) (Lit TInt32 (LInt32 150)) OTimes) (UOp TInt32 (Var TInt32 "var1") Neg) OLT) [] [],If (Lit TBool (LBool True)) [Fork [("fun2",[Left (BOp TInt32 (Var TInt32 "var1") (Lit TInt32 (LInt32 37)) OMinus)]),("fun2",[Left (BOp TInt32 (BOp TInt32 (Var TInt32 "var1") (Lit TInt32 (LInt32 215)) OTimes) (BOp TInt32 (Var TInt32 "var1") (Lit TInt32 (LInt32 67)) OMinus) OMinus)]),("fun2",[Left (BOp TInt32 (UOp TInt32 (Lit TInt32 (LInt32 100)) Neg) (BOp TInt32 (Var TInt32 "var1") (Var TInt32 "var1") OPlus) OTimes)]),("fun2",[Left (BOp TInt32 (Var TInt32 "var1") (Lit TInt32 (LInt32 24)) OTimes)]),("fun2",[Left (Var TInt32 "var1")]),("fun2",[Left (BOp TInt32 (Var TInt32 "var1") (Var TInt32 "var1") OMinus)]),("fun2",[Left (BOp TInt32 (Lit TInt32 (LInt32 1)) (Var TInt32 "var1") OMinus)]),("fun2",[Left (Lit TInt32 (LInt32 51))]),("fun2",[Left (BOp TInt32 (Var TInt32 "var1") (Var TInt32 "var1") OTimes)]),("fun2",[Left (BOp TInt32 (Lit TInt32 (LInt32 154)) (Lit TInt32 (LInt32 62)) OMinus)]),("fun2",[Left (BOp TInt32 (BOp TInt32 (Var TInt32 "var1") (Lit TInt32 (LInt32 67)) OMinus) (BOp TInt32 (Var TInt32 "var1") (Lit TInt32 (LInt32 151)) OMinus) OTimes)]),("fun2",[Left (BOp TInt32 (Var TInt32 "var1") (Lit TInt32 (LInt32 93)) OTimes)]),("fun2",[Left (BOp TInt32 (Lit TInt32 (LInt32 108)) (Lit TInt32 (LInt32 91)) OPlus)])]] [If (Lit TBool (LBool False)) [] []]],Fork [("fun2",[Left (Lit TInt32 (LInt32 54))]),("fun2",[Left (BOp TInt32 (Var TInt32 "var1") (Var TInt32 "var1") OTimes)]),("fun2",[Left (BOp TInt32 (Var TInt32 "var1") (Lit TInt32 (LInt32 181)) OTimes)]),("fun2",[Left (BOp TInt32 (Lit TInt32 (LInt32 148)) (Lit TInt32 (LInt32 94)) OTimes)]),("fun2",[Left (BOp TInt32 (BOp TInt32 (Var TInt32 "var1") (Var TInt32 "var1") OPlus) (UOp TInt32 (Lit TInt32 (LInt32 96)) Neg) OPlus)]),("fun2",[Left (BOp TInt32 (Var TInt32 "var1") (Var TInt32 "var1") OTimes)]),("fun2",[Left (BOp TInt32 (BOp TInt32 (Var TInt32 "var1") (Var TInt32 "var1") OMinus) (BOp TInt32 (Lit TInt32 (LInt32 32)) (Lit TInt32 (LInt32 182)) OMinus) OMinus)]),("fun2",[Left (BOp TInt32 (Lit TInt32 (LInt32 106)) (Lit TInt32 (LInt32 53)) OPlus)]),("fun2",[Left (Lit TInt32 (LInt32 54))]),("fun2",[Left (BOp TInt32 (BOp TInt32 (Lit TInt32 (LInt32 148)) (Lit TInt32 (LInt32 162)) OTimes) (BOp TInt32 (Lit TInt32 (LInt32 201)) (Var TInt32 "var1") OPlus) OMinus)]),("fun2",[Left (Var TInt32 "var1")])],NewRef (Fresh "v2") (Ref TBool) (BOp TBool (BOp TInt32 (Var TInt32 "var1") (Var TInt32 "var1") OTimes) (BOp TInt32 (Lit TInt32 (LInt32 185)) (Lit TInt32 (LInt32 123)) OTimes) OLT),If (BOp TBool (Lit TInt32 (LInt32 29)) (Var TInt32 "var1") OEQ) [After (Lit TUInt64 (LUInt64 47)) ("v2",Ref TBool) (BOp TBool (BOp TInt32 (Lit TInt32 (LInt32 213)) (Lit TInt32 (LInt32 97)) OPlus) (BOp TInt32 (Lit TInt32 (LInt32 126)) (Lit TInt32 (LInt32 215)) OPlus) OLT)] [Fork [("fun2",[Left (BOp TInt32 (BOp TInt32 (Lit TInt32 (LInt32 170)) (Var TInt32 "var1") OPlus) (BOp TInt32 (Lit TInt32 (LInt32 215)) (Lit TInt32 (LInt32 158)) OPlus) OMinus)]),("fun2",[Left (Lit TInt32 (LInt32 137))]),("fun2",[Left (BOp TInt32 (UOp TInt32 (Var TInt32 "var1") Neg) (BOp TInt32 (Lit TInt32 (LInt32 196)) (Var TInt32 "var1") OMinus) OPlus)]),("fun2",[Left (BOp TInt32 (Var TInt32 "var1") (Lit TInt32 (LInt32 118)) OMinus)]),("fun2",[Left (BOp TInt32 (BOp TInt32 (Lit TInt32 (LInt32 212)) (Var TInt32 "var1") OPlus) (BOp TInt32 (Var TInt32 "var1") (Lit TInt32 (LInt32 25)) OMinus) OPlus)]),("fun2",[Left (BOp TInt32 (Var TInt32 "var1") (Lit TInt32 (LInt32 131)) OTimes)])]],Wait [("v2",Ref TBool)]] [Fork [("fun2",[Left (UOp TInt32 (BOp TInt32 (BOp TInt32 (Lit TInt32 (LInt32 50)) (Lit TInt32 (LInt32 74)) OTimes) (UOp TInt32 (Var TInt32 "var1") Neg) OPlus) Neg)]),("fun2",[Left (BOp TInt32 (Var TInt32 "var1") (Lit TInt32 (LInt32 85)) OPlus)]),("fun2",[Left (UOp TInt32 (BOp TInt32 (UOp TInt32 (Var TInt32 "var1") Neg) (BOp TInt32 (Var TInt32 "var1") (Lit TInt32 (LInt32 88)) OPlus) OPlus) Neg)]),("fun2",[Left (Lit TInt32 (LInt32 127))]),("fun2",[Left (UOp TInt32 (BOp TInt32 (Var TInt32 "var1") (Var TInt32 "var1") OPlus) Neg)]),("fun2",[Left (BOp TInt32 (Lit TInt32 (LInt32 8)) (Var TInt32 "var1") OPlus)]),("fun2",[Left (Var TInt32 "var1")]),("fun2",[Left (BOp TInt32 (BOp TInt32 (Lit TInt32 (LInt32 0)) (Var TInt32 "var1") OTimes) (UOp TInt32 (Lit TInt32 (LInt32 135)) Neg) OTimes)]),("fun2",[Left (BOp TInt32 (BOp TInt32 (Lit TInt32 (LInt32 90)) (Var TInt32 "var1") OPlus) (BOp TInt32 (Lit TInt32 (LInt32 51)) (Var TInt32 "var1") OTimes) OPlus)]),("fun2",[Left (BOp TInt32 (Lit TInt32 (LInt32 203)) (Var TInt32 "var1") OTimes)]),("fun2",[Left (BOp TInt32 (BOp TInt32 (Lit TInt32 (LInt32 68)) (Lit TInt32 (LInt32 154)) OTimes) (BOp TInt32 (Var TInt32 "var1") (Lit TInt32 (LInt32 78)) OPlus) OMinus)]),("fun2",[Left (BOp TInt32 (BOp TInt32 (Var TInt32 "var1") (Var TInt32 "var1") OTimes) (BOp TInt32 (Lit TInt32 (LInt32 75)) (Lit TInt32 (LInt32 123)) OTimes) OTimes)]),("fun2",[Left (BOp TInt32 (UOp TInt32 (Lit TInt32 (LInt32 101)) Neg) (UOp TInt32 (Var TInt32 "var1") Neg) OPlus)]),("fun2",[Left (UOp TInt32 (BOp TInt32 (BOp TInt32 (Lit TInt32 (LInt32 108)) (Lit TInt32 (LInt32 178)) OPlus) (BOp TInt32 (Var TInt32 "var1") (Lit TInt32 (LInt32 178)) OPlus) OPlus) Neg)])],Fork [("fun2",[Left (UOp TInt32 (BOp TInt32 (UOp TInt32 (Var TInt32 "var1") Neg) (BOp TInt32 (Lit TInt32 (LInt32 190)) (Lit TInt32 (LInt32 47)) OTimes) OTimes) Neg)]),("fun2",[Left (BOp TInt32 (Var TInt32 "var1") (Lit TInt32 (LInt32 204)) OMinus)])]],Fork [("fun2",[Left (BOp TInt32 (BOp TInt32 (Var TInt32 "var1") (Var TInt32 "var1") OMinus) (BOp TInt32 (Lit TInt32 (LInt32 99)) (Lit TInt32 (LInt32 38)) OMinus) OMinus)])],Fork [("fun2",[Left (BOp TInt32 (Lit TInt32 (LInt32 54)) (Lit TInt32 (LInt32 59)) OMinus)])],Fork [("fun2",[Left (Var TInt32 "var1")])],Fork [("fun2",[Left (Var TInt32 "var1")])],NewRef (Fresh "v22") (Ref TBool) (BOp TBool (Var TInt32 "var1") (Lit TInt32 (LInt32 175)) OLT),Fork [("fun2",[Left (BOp TInt32 (Var TInt32 "var1") (Lit TInt32 (LInt32 211)) OMinus)])],Changed (Fresh "v27") TBool ("v22",Ref TBool),Fork [("fun2",[Left (BOp TInt32 (BOp TInt32 (Var TInt32 "var1") (Var TInt32 "var1") OPlus) (BOp TInt32 (Var TInt32 "var1") (Lit TInt32 (LInt32 168)) OPlus) OPlus)])],Wait [("v22",Ref TBool)],After (Lit TUInt64 (LUInt64 4916)) ("v22",Ref TBool) (BOp TBool (Var TInt32 "var1") (Var TInt32 "var1") OLT),Fork [("fun2",[Left (BOp TInt32 (BOp TInt32 (Var TInt32 "var1") (Var TInt32 "var1") OPlus) (BOp TInt32 (Var TInt32 "var1") (Lit TInt32 (LInt32 94)) OMinus) OTimes)])],Fork [("fun2",[Left (BOp TInt32 (BOp TInt32 (Var TInt32 "var1") (Lit TInt32 (LInt32 20)) OMinus) (BOp TInt32 (Var TInt32 "var1") (Lit TInt32 (LInt32 187)) OPlus) OPlus)])],After (Lit TUInt64 (LUInt64 584)) ("v22",Ref TBool) (BOp TBool (BOp TInt32 (Lit TInt32 (LInt32 194)) (Var TInt32 "var1") OTimes) (BOp TInt32 (Lit TInt32 (LInt32 130)) (Lit TInt32 (LInt32 179)) OMinus) OLT),GetRef (Fresh "v32") TBool ("v22",Ref TBool),Wait [("v22",Ref TBool)],GetRef (Fresh "v38") TBool ("v22",Ref TBool),After (Lit TUInt64 (LUInt64 4436)) ("v22",Ref TBool) (BOp TBool (Var TInt32 "var1") (Var TInt32 "var1") OLT),After (Lit TUInt64 (LUInt64 2968)) ("v22",Ref TBool) (BOp TBool (BOp TBool (Var TInt32 "var1") (Var TInt32 "var1") OLT) (BOp TBool (Var TInt32 "var1") (Lit TInt32 (LInt32 67)) OLT) OEQ),After (Lit TUInt64 (LUInt64 1669)) ("v22",Ref TBool) (BOp TBool (BOp TInt32 (Var TInt32 "var1") (Var TInt32 "var1") OPlus) (BOp TInt32 (Var TInt32 "var1") (Lit TInt32 (LInt32 26)) OTimes) OLT),Fork [("fun2",[Left (UOp TInt32 (UOp TInt32 (Var TInt32 "var1") Neg) Neg)])],GetRef (Fresh "v40") TBool ("v22",Ref TBool),Fork [("fun2",[Left (BOp TInt32 (BOp TInt32 (Lit TInt32 (LInt32 180)) (Lit TInt32 (LInt32 130)) OMinus) (BOp TInt32 (Var TInt32 "var1") (Var TInt32 "var1") OMinus) OMinus)])],Changed (Fresh "v45") TBool ("v22",Ref TBool),Wait [("v22",Ref TBool)],Fork [("fun2",[Left (BOp TInt32 (BOp TInt32 (Lit TInt32 (LInt32 14)) (Lit TInt32 (LInt32 205)) OMinus) (BOp TInt32 (Lit TInt32 (LInt32 178)) (Lit TInt32 (LInt32 66)) OPlus) OMinus)])],Wait [("v22",Ref TBool)]]})]},
    Program {main = "fun1", args = [Right ("ref1",Ref TInt64)], funs = Map.fromList [("fun1",Procedure {name = "fun1", arguments = [("ref1",Ref TInt64)], body = [After (Lit TUInt64 (LUInt64 4814)) ("ref1",Ref TInt64) (Lit TInt64 (LInt64 (-3609))),Wait [("ref1",Ref TInt64)],Fork [("fun1",[Right ("ref1",Ref TInt64)]),("fun1",[Right ("ref1",Ref TInt64)])],Fork [("fun1",[Right ("ref1",Ref TInt64)])],After (Lit TUInt64 (LUInt64 2279)) ("ref1",Ref TInt64) (BOp TInt64 (BOp TInt64 (Lit TInt64 (LInt64 (-27380))) (Lit TInt64 (LInt64 1)) OTimes) (BOp TInt64 (Lit TInt64 (LInt64 13448)) (Lit TInt64 (LInt64 (-32994))) OMinus) OTimes)]})]},
    Program {main = "fun4", args = [], funs = Map.fromList [("fun4",Procedure {name = "fun4", arguments = [], body = [If (Lit TBool (LBool False)) [Fork [("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[])],If (BOp TBool (Lit TInt32 (LInt32 182)) (Lit TInt32 (LInt32 38)) OLT) [If (BOp TBool (Lit TBool (LBool False)) (Lit TBool (LBool True)) OEQ) [NewRef (Fresh "v0") (Ref TBool) (BOp TBool (Lit TInt32 (LInt32 173)) (Lit TInt32 (LInt32 195)) OEQ)] [Fork [("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[])]],NewRef (Fresh "v1") (Ref TBool) (BOp TBool (BOp TInt32 (Lit TInt32 (LInt32 36)) (Lit TInt32 (LInt32 203)) OMinus) (BOp TInt32 (Lit TInt32 (LInt32 44)) (Lit TInt32 (LInt32 47)) OTimes) OLT)] [NewRef (Fresh "v2") (Ref TBool) (Lit TBool (LBool False)),GetRef (Fresh "v3") TBool ("v2",Ref TBool),After (Lit TUInt64 (LUInt64 3690)) ("v2",Ref TBool) (Var TBool "v3")],Fork [("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[])],If (BOp TBool (BOp TInt32 (Lit TInt32 (LInt32 211)) (Lit TInt32 (LInt32 111)) OMinus) (UOp TInt32 (Lit TInt32 (LInt32 190)) Neg) OEQ) [Fork [("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[])],Fork [("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[])]] [Fork [("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[])],NewRef (Fresh "v4") (Ref TBool) (BOp TBool (Lit TInt32 (LInt32 114)) (Lit TInt32 (LInt32 100)) OLT)],Fork [("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[])],If (BOp TBool (BOp TInt32 (Lit TInt32 (LInt32 124)) (Lit TInt32 (LInt32 211)) OTimes) (BOp TInt32 (Lit TInt32 (LInt32 187)) (Lit TInt32 (LInt32 53)) OMinus) OLT) [Fork [("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[])]] [Fork [("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[])]],NewRef (Fresh "v5") (Ref TBool) (BOp TBool (BOp TBool (Lit TInt32 (LInt32 89)) (Lit TInt32 (LInt32 30)) OLT) (BOp TBool (Lit TInt32 (LInt32 74)) (Lit TInt32 (LInt32 181)) OLT) OEQ),Fork [("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[])]] [If (Lit TBool (LBool True)) [NewRef (Fresh "v6") (Ref TInt32) (BOp TInt32 (Lit TInt32 (LInt32 90)) (Lit TInt32 (LInt32 11)) OPlus),GetRef (Fresh "v7") TInt32 ("v6",Ref TInt32),If (Lit TBool (LBool True)) [If (BOp TBool (BOp TInt32 (Lit TInt32 (LInt32 167)) (Var TInt32 "v7") OMinus) (BOp TInt32 (Var TInt32 "v7") (Var TInt32 "v7") OPlus) OEQ) [] []] [Wait [("v6",Ref TInt32)]],If (BOp TBool (BOp TInt32 (Var TInt32 "v7") (Var TInt32 "v7") OMinus) (BOp TInt32 (Var TInt32 "v7") (Lit TInt32 (LInt32 89)) OTimes) OEQ) [] []] [NewRef (Fresh "v8") (Ref TInt32) (Lit TInt32 (LInt32 37)),If (BOp TBool (Lit TInt32 (LInt32 33)) (Lit TInt32 (LInt32 170)) OLT) [] [After (Lit TUInt64 (LUInt64 2419)) ("v8",Ref TInt32) (BOp TInt32 (BOp TInt32 (Lit TInt32 (LInt32 141)) (Lit TInt32 (LInt32 136)) OMinus) (BOp TInt32 (Lit TInt32 (LInt32 55)) (Lit TInt32 (LInt32 71)) OMinus) OPlus)],NewRef (Fresh "v9") (Ref TBool) (BOp TBool (Lit TInt32 (LInt32 165)) (Lit TInt32 (LInt32 90)) OLT),Wait [("v9",Ref TBool)]],NewRef (Fresh "v10") (Ref TInt32) (Lit TInt32 (LInt32 180)),After (Lit TUInt64 (LUInt64 3533)) ("v10",Ref TInt32) (BOp TInt32 (Lit TInt32 (LInt32 64)) (Lit TInt32 (LInt32 146)) OMinus),Wait [("v10",Ref TInt32)],NewRef (Fresh "v11") (Ref TBool) (Lit TBool (LBool True)),Changed (Fresh "v12") TBool ("v11",Ref TBool),After (Lit TUInt64 (LUInt64 1021)) ("v11",Ref TBool) (Var TBool "v12")],NewRef (Fresh "v13") (Ref TInt32) (BOp TInt32 (Lit TInt32 (LInt32 16)) (Lit TInt32 (LInt32 125)) OPlus),GetRef (Fresh "v14") TInt32 ("v13",Ref TInt32),Fork [("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[])],Wait [("v13",Ref TInt32)],GetRef (Fresh "v15") TInt32 ("v13",Ref TInt32),Changed (Fresh "v16") TBool ("v13",Ref TInt32),After (Lit TUInt64 (LUInt64 3080)) ("v13",Ref TInt32) (Lit TInt32 (LInt32 105)),GetRef (Fresh "v17") TInt32 ("v13",Ref TInt32),After (Lit TUInt64 (LUInt64 2827)) ("v13",Ref TInt32) (BOp TInt32 (BOp TInt32 (Var TInt32 "v14") (Var TInt32 "v15") OTimes) (BOp TInt32 (Var TInt32 "v17") (Lit TInt32 (LInt32 171)) OPlus) OPlus),Wait [("v13",Ref TInt32)],After (Lit TUInt64 (LUInt64 3376)) ("v13",Ref TInt32) (BOp TInt32 (BOp TInt32 (Var TInt32 "v15") (Var TInt32 "v14") OPlus) (BOp TInt32 (Var TInt32 "v14") (Var TInt32 "v17") OMinus) OTimes),NewRef (Fresh "v18") (Ref TBool) (BOp TBool (Var TInt32 "v14") (Var TInt32 "v14") OLT),Wait [("v13",Ref TInt32)]]})]},
    Program {main = "fun1", args = [], funs = Map.fromList [("fun1",Procedure {name = "fun1", arguments = [], body = [NewRef (Fresh "v0") (Ref TBool) (Lit TBool (LBool True)),After (Lit TUInt64 (LUInt64 878)) ("v0",Ref TBool) (Lit TBool (LBool False)),Wait [("v0",Ref TBool)],Changed (Fresh "v8") TBool ("v0",Ref TBool),GetRef (Fresh "v11") TBool ("v0",Ref TBool),After (Lit TUInt64 (LUInt64 3569)) ("v0",Ref TBool) (BOp TBool (BOp TInt32 (Lit TInt32 (LInt32 1)) (Lit TInt32 (LInt32 133)) OTimes) (UOp TInt32 (Lit TInt32 (LInt32 86)) Neg) OEQ)]})]},
    Program {main = "fun3", args = [], funs = Map.fromList [("fun3",Procedure {name = "fun3", arguments = [], body = [NewRef (Fresh "v2") (Ref TBool) (BOp TBool (BOp TInt32 (Lit TInt32 (LInt32 127)) (Lit TInt32 (LInt32 38)) OMinus) (BOp TInt32 (Lit TInt32 (LInt32 159)) (Lit TInt32 (LInt32 29)) OMinus) OLT),After (Lit TUInt64 (LUInt64 3110)) ("v2",Ref TBool) (BOp TBool (BOp TBool (Lit TInt32 (LInt32 79)) (Lit TInt32 (LInt32 145)) OEQ) (BOp TBool (Lit TInt32 (LInt32 55)) (Lit TInt32 (LInt32 38)) OLT) OEQ),Changed (Fresh "v4") TBool ("v2",Ref TBool)]})]},
    Program {main = "fun6", args = [], funs = Map.fromList [("fun6",Procedure {name = "fun6", arguments = [], body = [NewRef (Fresh "v0") (Ref TBool) (BOp TBool (Lit TBool (LBool True)) (Lit TBool (LBool True)) OEQ),After (Lit TUInt64 (LUInt64 2830)) ("v0",Ref TBool) (Lit TBool (LBool True)),After (Lit TUInt64 (LUInt64 1486)) ("v0",Ref TBool) (BOp TBool (Lit TInt32 (LInt32 110)) (Lit TInt32 (LInt32 168)) OLT),Wait [("v0",Ref TBool)],Wait [("v0",Ref TBool)],After (Lit TUInt64 (LUInt64 1611)) ("v0",Ref TBool) (BOp TBool (BOp TInt32 (Lit TInt32 (LInt32 62)) (Lit TInt32 (LInt32 1)) OTimes) (BOp TInt32 (Lit TInt32 (LInt32 1)) (Lit TInt32 (LInt32 193)) OMinus) OLT),GetRef (Fresh "v1") TBool ("v0",Ref TBool),GetRef (Fresh "v2") TBool ("v0",Ref TBool),Changed (Fresh "v3") TBool ("v0",Ref TBool),NewRef (Fresh "v5") (Ref TInt32) (BOp TInt32 (BOp TInt32 (Lit TInt32 (LInt32 1)) (Lit TInt32 (LInt32 1)) OTimes) (BOp TInt32 (Lit TInt32 (LInt32 1)) (Lit TInt32 (LInt32 169)) OMinus) OTimes),Wait [("v5",Ref TInt32)],Wait [("v5",Ref TInt32)],Changed (Fresh "v6") TBool ("v0",Ref TBool),Changed (Fresh "v7") TBool ("v0",Ref TBool)]})]},
    Program {main = "fun3", args = [], funs = Map.fromList [("fun3",Procedure {name = "fun3", arguments = [], body = [NewRef (Fresh "v0") (Ref TBool) (BOp TBool (Lit TInt32 (LInt32 160)) (Lit TInt32 (LInt32 117)) OEQ),After (Lit TUInt64 (LUInt64 918)) ("v0",Ref TBool) (BOp TBool (BOp TInt32 (Lit TInt32 (LInt32 203)) (Lit TInt32 (LInt32 84)) OTimes) (BOp TInt32 (Lit TInt32 (LInt32 196)) (Lit TInt32 (LInt32 147)) OMinus) OLT),GetRef (Fresh "v1") TBool ("v0",Ref TBool),GetRef (Fresh "v2") TBool ("v0",Ref TBool),GetRef (Fresh "v3") TBool ("v0",Ref TBool),Changed (Fresh "v4") TBool ("v0",Ref TBool)]})]},
    Program {main = "fun4", args = [Right ("ref1",Ref TUInt64),Right ("ref5",Ref TInt64),Right ("ref8",Ref TInt64)], funs = Map.fromList [("fun4",Procedure {name = "fun4", arguments = [("ref1",Ref TUInt64),("ref5",Ref TInt64),("ref8",Ref TInt64)], body = [After (Lit TUInt64 (LUInt64 2153)) ("ref5",Ref TInt64) (Lit TInt64 (LInt64 1)),Wait [("ref5",Ref TInt64),("ref8",Ref TInt64)],Changed (Fresh "v0") TBool ("ref5",Ref TInt64),Fork [("fun4",[Right ("ref1",Ref TUInt64),Right ("ref8",Ref TInt64),Right ("ref8",Ref TInt64)])]]})]}
  ]

singlecase :: Program
singlecase = Program {main = "fun1", args = [Right ("ref1",Ref TInt64)], funs = Map.fromList [("fun1",Procedure {name = "fun1", arguments = [("ref1",Ref TInt64)], body = [After (Lit TUInt64 (LUInt64 4814)) ("ref1",Ref TInt64) (Lit TInt64 (LInt64 (-3609))),Wait [("ref1",Ref TInt64)],Fork [("fun1",[Right ("ref1",Ref TInt64)]),("fun1",[Right ("ref1",Ref TInt64)])],Fork [("fun1",[Right ("ref1",Ref TInt64)])],After (Lit TUInt64 (LUInt64 2279)) ("ref1",Ref TInt64) (BOp TInt64 (BOp TInt64 (Lit TInt64 (LInt64 (-27380))) (Lit TInt64 (LInt64 1)) OTimes) (BOp TInt64 (Lit TInt64 (LInt64 13448)) (Lit TInt64 (LInt64 (-32994))) OMinus) OTimes)]})]}