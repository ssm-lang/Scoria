module Main where

import Data.List

import Frontend
import Fib
import NonTerminate
import Core ()
import LowCore hiding (main)
import qualified Data.Map as Map
import qualified LowCore as LC
import qualified LowInterpreter as I2
import Data.Time ( diffUTCTime, getCurrentTime )
import System.IO
import Criterion.Main

singlecase :: Program
singlecase = Program {LC.main = "fun4", args = [], funs = Map.fromList [("fun4",Procedure {name = "fun4", arguments = [], body = [If (Lit TBool (LBool False)) [Fork [("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[])],If (BOp TBool (Lit TInt32 (LInt32 182)) (Lit TInt32 (LInt32 38)) OLT) [If (BOp TBool (Lit TBool (LBool False)) (Lit TBool (LBool True)) OEQ) [NewRef (Fresh "v0") (Ref TBool) (BOp TBool (Lit TInt32 (LInt32 173)) (Lit TInt32 (LInt32 195)) OEQ)] [Fork [("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[])]],NewRef (Fresh "v1") (Ref TBool) (BOp TBool (BOp TInt32 (Lit TInt32 (LInt32 36)) (Lit TInt32 (LInt32 203)) OMinus) (BOp TInt32 (Lit TInt32 (LInt32 44)) (Lit TInt32 (LInt32 47)) OTimes) OLT)] [NewRef (Fresh "v2") (Ref TBool) (Lit TBool (LBool False)),GetRef (Fresh "v3") TBool ("v2",Ref TBool),After (Lit TUInt64 (LUInt64 3690)) ("v2",Ref TBool) (Var TBool "v3")],Fork [("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[])],If (BOp TBool (BOp TInt32 (Lit TInt32 (LInt32 211)) (Lit TInt32 (LInt32 111)) OMinus) (UOp TInt32 (Lit TInt32 (LInt32 190)) Neg) OEQ) [Fork [("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[])],Fork [("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[])]] [Fork [("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[])],NewRef (Fresh "v4") (Ref TBool) (BOp TBool (Lit TInt32 (LInt32 114)) (Lit TInt32 (LInt32 100)) OLT)],Fork [("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[])],If (BOp TBool (BOp TInt32 (Lit TInt32 (LInt32 124)) (Lit TInt32 (LInt32 211)) OTimes) (BOp TInt32 (Lit TInt32 (LInt32 187)) (Lit TInt32 (LInt32 53)) OMinus) OLT) [Fork [("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[])]] [Fork [("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[])]],NewRef (Fresh "v5") (Ref TBool) (BOp TBool (BOp TBool (Lit TInt32 (LInt32 89)) (Lit TInt32 (LInt32 30)) OLT) (BOp TBool (Lit TInt32 (LInt32 74)) (Lit TInt32 (LInt32 181)) OLT) OEQ),Fork [("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[])]] [If (Lit TBool (LBool True)) [NewRef (Fresh "v6") (Ref TInt32) (BOp TInt32 (Lit TInt32 (LInt32 90)) (Lit TInt32 (LInt32 11)) OPlus),GetRef (Fresh "v7") TInt32 ("v6",Ref TInt32),If (Lit TBool (LBool True)) [If (BOp TBool (BOp TInt32 (Lit TInt32 (LInt32 167)) (Var TInt32 "v7") OMinus) (BOp TInt32 (Var TInt32 "v7") (Var TInt32 "v7") OPlus) OEQ) [] []] [Wait [("v6",Ref TInt32)]],If (BOp TBool (BOp TInt32 (Var TInt32 "v7") (Var TInt32 "v7") OMinus) (BOp TInt32 (Var TInt32 "v7") (Lit TInt32 (LInt32 89)) OTimes) OEQ) [] []] [NewRef (Fresh "v8") (Ref TInt32) (Lit TInt32 (LInt32 37)),If (BOp TBool (Lit TInt32 (LInt32 33)) (Lit TInt32 (LInt32 170)) OLT) [] [After (Lit TUInt64 (LUInt64 2419)) ("v8",Ref TInt32) (BOp TInt32 (BOp TInt32 (Lit TInt32 (LInt32 141)) (Lit TInt32 (LInt32 136)) OMinus) (BOp TInt32 (Lit TInt32 (LInt32 55)) (Lit TInt32 (LInt32 71)) OMinus) OPlus)],NewRef (Fresh "v9") (Ref TBool) (BOp TBool (Lit TInt32 (LInt32 165)) (Lit TInt32 (LInt32 90)) OLT),Wait [("v9",Ref TBool)]],NewRef (Fresh "v10") (Ref TInt32) (Lit TInt32 (LInt32 180)),After (Lit TUInt64 (LUInt64 3533)) ("v10",Ref TInt32) (BOp TInt32 (Lit TInt32 (LInt32 64)) (Lit TInt32 (LInt32 146)) OMinus),Wait [("v10",Ref TInt32)],NewRef (Fresh "v11") (Ref TBool) (Lit TBool (LBool True)),Changed (Fresh "v12") TBool ("v11",Ref TBool),After (Lit TUInt64 (LUInt64 1021)) ("v11",Ref TBool) (Var TBool "v12")],NewRef (Fresh "v13") (Ref TInt32) (BOp TInt32 (Lit TInt32 (LInt32 16)) (Lit TInt32 (LInt32 125)) OPlus),GetRef (Fresh "v14") TInt32 ("v13",Ref TInt32),Fork [("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[]),("fun4",[])],Wait [("v13",Ref TInt32)],GetRef (Fresh "v15") TInt32 ("v13",Ref TInt32),Changed (Fresh "v16") TBool ("v13",Ref TInt32),After (Lit TUInt64 (LUInt64 3080)) ("v13",Ref TInt32) (Lit TInt32 (LInt32 105)),GetRef (Fresh "v17") TInt32 ("v13",Ref TInt32),After (Lit TUInt64 (LUInt64 2827)) ("v13",Ref TInt32) (BOp TInt32 (BOp TInt32 (Var TInt32 "v14") (Var TInt32 "v15") OTimes) (BOp TInt32 (Var TInt32 "v17") (Lit TInt32 (LInt32 171)) OPlus) OPlus),Wait [("v13",Ref TInt32)],After (Lit TUInt64 (LUInt64 3376)) ("v13",Ref TInt32) (BOp TInt32 (BOp TInt32 (Var TInt32 "v15") (Var TInt32 "v14") OPlus) (BOp TInt32 (Var TInt32 "v14") (Var TInt32 "v17") OMinus) OTimes),NewRef (Fresh "v18") (Ref TBool) (BOp TBool (Var TInt32 "v14") (Var TInt32 "v14") OLT),Wait [("v13",Ref TInt32)]]})]}

main :: IO ()
main = do
  let tr = take 10000 $ I2.interpret singlecase
  putStrLn $ unlines $ map show $ tr
  
--  defaultMain
--  [ bench "new interpreter" $ nf (I2.interpret . LC.transpile) $ myfib 15 inputref
--  ]